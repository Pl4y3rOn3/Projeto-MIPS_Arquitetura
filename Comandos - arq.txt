

 OP      rs    rt  rd  func
 100     000   011 000 0000
15:13   12:10  9:7 6:4  3:0

100 000 011 000 0000




OP	    rs    rt    rd   shamt  func
000000 10010 10001 01000 00000 100000
31:26  25:21 20:16 15:11 10:06  05:00

00000000010000110010000000100000  //add

000000 00001 00100 00101 00000 100000 //add
00000000100101111100100000100000 //add
00000000000111111101000000100000
00000000001001000010100000100000

000000 00100 00010 00101 00000 100010  //sub
00000000100000100010100000100010  //sub

000000 00100 00011 01000 00000 100100 //and
00000000100000110100000000100100 //and

000000 00100 00011 01001 00000 100101 //or
00000000100000110100100000100101 //or

000000 00100 00011 01010 00000 100110 //xor
00000000100000110101000000100110 //xor

000000 00100 00011 01011 00000 100111 //nor
00000000100000110101100000100111 //nor

000000 00010 00011 01100 00000 000100 //sllv
00000000010000110110000000000100 //sllv

000000 00010 00011 01101 00000 000110 //srlv
00000000010000110110100000000110 //srlv

000000 00010 11100 11000 00000 000111 //srav
00000000010111001100000000000111 //srav



000000 11100 00010 10000 00000 101010 //slt
00000000010111000111100000101010 //slt = 0
00000011100000101000000000101010 //slt = 1

000000 00010 00011 00111 00000 101011 //sltu
00000000010000110011100000101011 //sltu


000100 00101 00011 0000000010101010 //beq
00010000101000110000000010101010 //beq


001010 00100 10001 1000000000010000 //slti
00101000100100010000000000010000 //slti
00101000100100011000000000010000

001011 00100 10011 0000000000010000 //sltiu
00101100100100110000000000010000 //sltiu

001100 00100 10100 0000000000001111 //andi
00110000100101000000000000001111 //andi

001101 00100 10101 0000000000001111 //ori
00110100100101010000000000001111 //ori

001110 00100 10110 0000000000001111 //xori
00111000100101100000000000001111 //xor

001000 00001 00001 0000000000000101 //addi
00100011100111001000000000000100 //addi

101011 00101 00001 0000000000000010 //sw #
10101100101000010000000000000010 //sw #

000000 00010 00000 0000000000011100 //sw reg2, 7($s0)	##

101011 00010 00011 0000000000000100 // sw reg2, 4($s3) 
10101100010000110000000000000100 #
101011 00010 00000 0000000000000000 #

100011 00011 00100 0000000000000100 //lw ##
10001100101101110000000000000010 //lw #

100011 00010 00100 0000000000000100 //lw
10001100011001000000000000000100 #
10001100000001000000000000000000 #

000010 00000000000000000010000010 //j
00001000000000001010100000000010 //j

000011 00000000000000000010101010 //jal


000000 11100 00000 00000 00000 001000 //jr
00000011100000000000000000001000 //jr


001111 00000 00010 0000000000000100 //lui






rom[0] = 32'b00100000010000100000000000000001; //addi 1 no reg 2	 = reg2 = 1
                rom[1] = 32'b00100000011000110000000000000100; //addi 4 no reg 3  = reg3 = 4
                rom[2] = 32'b00000000010000110010000000100000; //add reg 2 com reg 3 no reg4 = reg4 = 5
                rom[3] = 32'b00000000100000100010100000100010; //sub reg 4 com reg 2 no reg5 = reg5 = 4
                rom[4] = 32'b00000000010000110011100000101011; //sltu reg7 = reg2 < reg3
                rom[5] = 32'b00000000100000110100000000100100; //and reg8 = reg3 & reg4
					 rom[6] = 32'b00000000100000110100100000100101; //or reg9 = reg3 | reg4
                rom[7] = 32'b00000000100000110101000000100110; //xor reg10 = reg3 ^ reg4
                rom[8] = 32'b00000000100000110101100000100111; //nor reg11 = ~(reg3 | reg4)
                rom[9] = 32'b00000000010000110110000000000100; //sllv reg12 = reg3 << reg2
                rom[10] = 32'b00000000010000110110100000000110;//srlv reg13 = re3 >> reg2  
                rom[11] = 32'b00100011100111001000000000000100;//addi reg28 = reg28 + muito
					 rom[12] = 32'b00000000010111000111100000101010;//slt reg15 = reg2 < reg28
                rom[13] = 32'b00000011100000101000000000101010;//slt reg16 = reg28 < reg2
                rom[14] = 32'b00101000100100010000000000010000;//slti reg17 = reg4 < 16
                rom[15] = 32'b00101000100100101000000000010000;//slti reg18 = reg4 < -16
                rom[16] = 32'b00101100100100110000000000010000;//sltiu reg19 = reg4 < 16
                rom[17] = 32'b00110000100101000000000000001111;//andi reg20 = reg4 & 1111
					 rom[18] = 32'b00110100100101010000000000001111;//ori reg21 = reg4 | 1111	
                rom[19] = 32'b00111000100101100000000000001111;//xori reg22 = reg4 ^ 1111 
                rom[20] = 32'b00000000010111001100000000000111;//srav reg24 = reg28 >>> reg2   
                rom[21] = 32'b10101100101000010000000000000010;//sw reg5, 2(reg1) = 4
                rom[22] = 32'b10001100101101110000000000000010;//lw reg23, 2(reg1) = 4
                rom[23] = 32'b00000000100101111100100000100000;//add reg25 = reg23 + reg4 = 9
					 rom[24] = 32'b00010000101000110000000010101010;//beq reg5 == reg3? 10101010:0	
                rom[25] = 32'b00001100000010001010100000000010;//jal   
                rom[26] = 32'b00000000000111111101000000100000;//add reg26 == reg31 + reg0
                rom[27] = 32'b00010000101000110000000010101010;//jr pc = reg28  
                rom[28] = 32'b00000000000000000000000000000000;  
                rom[29] = 32'b00000000000000000000000000000000;
					 rom[30] = 32'b00000000000000000000000000000000;  	
                rom[31] = 32'b00000000000000000000000000000000;  